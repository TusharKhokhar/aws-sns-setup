// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String           @id @default(cuid())
  email          String?          @unique
  emailVerified  DateTime?        @map("email_verified")
  accounts       Account[]        @relation(name: "AccountToUser")
  sessions       Session[]        @relation(name: "SessionToUser")
  firstName      String?
  lastName       String?
  phoneVerified  Boolean          @default(false)
  jobTitle       String?
  isActive       Boolean          @default(false)
  userType       userType?
  accountNumber  String?
  createdById    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  phoneNumber    String?
  createdBy      User?            @relation(name: "userUsers", fields: [createdById], references: [id])
  users          User[]           @relation(name: "userUsers")
  billingHistory BillingHistory[] @relation(name: "BillingHistoryToUser")
  connectedEmail ConnectedEmail?  @relation(name: "ConnectedEmailToUser")
  salesforce     Salesforce?      @relation(name: "SalesforceToUser")
  company        Company?         @relation(name: "CompanyToUser")
  campaigns      Campaigns[]      @relation(name: "CampaignsToUser")
  prospects      Prospects[]      @relation(name: "ProspectsToUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Plans {
  id               String           @id @default(cuid())
  name             String
  price            Int
  description      String?          @db.MediumText
  type             planType         @default(MONTHLY)
  additionalCharge Int?
  discount         Int?
  includedVideos   Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?
  billingHistory   BillingHistory[] @relation(name: "BillingHistoryToPlans")

  @@map("plans")
}

model BillingHistory {
  id                String            @id @default(cuid())
  userId            String
  planId            String
  subscriptionModel subscriptionModel
  renewalPreriod    Int
  ratePerVideo      String
  creditFrequency   planType
  goLiveDate        DateTime
  includedVideos    Int
  paymentTerm       paymentTermType   @default(ON_THE_DAY)
  paymentMethod     paymentMethodType @default(CREDIT_CARD)
  dueDate           DateTime?
  status            billingStatus     @default(PENDING)
  stripeCustomerId  String?
  paymentId         String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?
  user              User              @relation(name: "BillingHistoryToUser", fields: [userId], references: [id], onDelete: Cascade)
  plan              Plans?            @relation(name: "BillingHistoryToPlans", fields: [planId], references: [id], onDelete: Cascade)

  @@map("billinghistory")
}

model ConnectedEmail {
  id           String    @id @default(cuid())
  userId       String    @unique
  token        String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  user         User      @relation(name: "ConnectedEmailToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("connectedemail")
}

model Salesforce {
  id           String    @id @default(cuid())
  userId       String    @unique
  instanceUrl  String?
  token        String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  user         User      @relation(name: "SalesforceToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("salesforce")
}

model Company {
  id           String     @id @default(cuid())
  userId       String     @unique
  name         String
  website      String?
  industry     String?
  address      String?
  description  String?    @db.MediumText
  isProviderOf String?
  logo         String?
  location     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
  user         User       @relation(name: "CompanyToUser", fields: [userId], references: [id], onDelete: Cascade)
  products     Products[] @relation(name: "CompanyToProducts")

  @@map("company")
}

model Products {
  id               String             @id @default(cuid())
  companyId        String
  name             String
  whatDoesItDo     String?            @db.MediumText
  HowDoesItWork    String?            @db.MediumText
  benefits         String?            @db.MediumText
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  company          Company            @relation(name: "CompanyToProducts", fields: [companyId], references: [id], onDelete: Cascade)
  campaignProducts CampaignProducts[] @relation(name: "CampaignProductsToProducts")

  @@map("products")
}

model Campaigns {
  id                      String                @id @default(cuid())
  userId                  String
  name                    String
  videoAvatar             videoAvatarType?
  videoBackground         String?
  scriptTone              scriptToneType        @default(COMEDIC)
  runAutoCampaign         Boolean?
  prospectNameIncluded    Boolean               @default(true)
  companyNameIncluded     Boolean               @default(true)
  companyEmailIncluded    Boolean               @default(true)
  companyPhoneIncluded    Boolean               @default(true)
  companyJobTitleIncluded Boolean               @default(true)
  videoAnimation          String?
  campaignStartDate       DateTime?
  firstFollowUpDate       DateTime?
  secondFollowUpDate      DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime?
  user                    User                  @relation(name: "CampaignsToUser", fields: [userId], references: [id], onDelete: Cascade)
  prospect                Prospects[]           @relation(name: "CampaignsToProspects")
  lineItemPerCampaign     LineItemPerCampaign[] @relation(name: "CampaignsToLineItemPerCampaign")
  campaignProducts        CampaignProducts[]    @relation(name: "CampaignProductsToCampaigns")
  qrCodes                 qrCodes[]             @relation(name: "CampaignsToqrCodes")

  @@map("campaigns")
}

model qrCodes {
  id         String      @id @default(cuid())
  campaignId String
  qrCodeLink String?
  type       qrCodeType?
  qrType     qrType?
  campaign   Campaigns   @relation(name: "CampaignsToqrCodes", fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("qrcodes")
}

model Prospects {
  id                  String                @id @default(cuid())
  createdBy           String
  campaignId          String
  firstName           String
  lastName            String
  email               String?
  phoneNumber         String?
  companyName         String
  jobTitle            String?
  country             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?
  website             String?
  createdByUser       User                  @relation(name: "ProspectsToUser", fields: [createdBy], references: [id], onDelete: Cascade)
  campaign            Campaigns             @relation(name: "CampaignsToProspects", fields: [campaignId], references: [id], onDelete: Cascade)
  lineItemPerCampaign LineItemPerCampaign[] @relation(name: "LineItemPerCampaignToProspects")

  @@unique([campaignId, email])
  @@map("prospects")
}

model LineItemPerCampaign {
  id           String           @id @default(cuid())
  campaignId   String
  prospectId   String
  videoId      String?
  emailStatus  emailStatusType?
  chatGPTStory String?          @db.MediumText
  emailBody    String?          @db.LongText
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?
  campaign     Campaigns        @relation(name: "CampaignsToLineItemPerCampaign", fields: [campaignId], references: [id], onDelete: Cascade)
  prospect     Prospects        @relation(name: "LineItemPerCampaignToProspects", fields: [prospectId], references: [id], onDelete: Cascade)

  @@unique([campaignId, prospectId])
  @@map("lineitempercampaign")
}

model CampaignProducts {
  campaignId String
  productId  String
  campaign   Campaigns @relation(name: "CampaignProductsToCampaigns", fields: [campaignId], references: [id], onDelete: Cascade)
  product    Products  @relation(name: "CampaignProductsToProducts", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([campaignId, productId])
}

enum userType {
  STANDARD
  ADMIN
  SUPER_ADMIN
}

enum planType {
  MONTHLY
  ANNUALLY
}

enum paymentTermType {
  ON_THE_DAY
  WEEK        @map("7days")
  MONTH       @map("30days")
  TWO_MONTH   @map("60days")
}

enum paymentMethodType {
  CREDIT_CARD
  MONTHLY_INVOICE
}

enum billingStatus {
  PAID
  EXPIRED
  PENDING
}

enum subscriptionModel {
  PAY_AS_YOU_GO
}

enum videoAvatarType {
  MALE
  FEMALE
}

enum scriptToneType {
  COMEDIC
  FORMAL
  INFORMAL
  OPTIMISTIC
  FRIENDLY
  ENCOURAGING
}

enum qrCodeType {
  PERSONAL
  COMPANY
}

enum qrType {
  WEBSITE
  WHATSAPP
  SMS
}

enum emailStatusType {
  SUCCESS
  FAIL
}
